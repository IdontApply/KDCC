apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: bitcoin-comment-process-db-backup
spec:
  entrypoint: main-block
  templates:

    # main block
  - name: main-block
    parallelism: 3
    steps:
    
    # generate list of the raw comments files
    - - name: generate-list-raw-comments 
        template: generate-list-raw-comments

    # loop over generate-list-raw-comments. process comment data and load it to gcs and bitcoin database. note, loaded data into gcs will be in mutiple files
    - - name: process-insert 
        template: bitcoin-comment-process-insert
        arguments:
          parameters:
          - name: url
            value: "{{item}}"
        withParam: "{{steps.generate-list-raw-comments.outputs.result}}"

    # load bitcoin prices into database
    - - name: bitcoin-price-block
        template: bitcoin-price-block

    # concatenate the mutiple files into a single file > dollar_mention.txt
    - - name: concatenate
        template: concatenate

    # backup the database to gcs
    - - name: backup
        template: backup




  - name: generate-list-raw-comments
    script:
      image: gcr.io/kdcc-282418/python-worker
      command: [python]
      source: |
        import json
        import sys
        from google.cloud import storage

        def get_file_names():
          files = []
          client = storage.Client()
          for blob in client.list_blobs('workflowkddc', prefix='Bitcoin/comments/raw/'):
            files.append(str(blob.name))
          return files
        
        json.dump(get_file_names()[:2], sys.stdout)




  - name: bitcoin-comment-process-insert
    inputs:
      parameters:
      - name: url
    container:
      env:
      - name: POSTGRES_DATABASE
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: dbname
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: username
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: password
      - name: POSTGRES_HOST
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: host
      - name: POSTGRES_PORT
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: port
      image: gcr.io/kdcc-282418/bitcoin-worker
      command: [python]
      args: ["wfunc/wfunc/bitcoin-comment-process-db.py","{{inputs.parameters.url}}"]





  - name: bitcoin-price-block
    parallelism: 2
    steps:
    - - name: generate-list-raw-price
        template: generate-list-raw-price

    - - name: process-insert
        template: bitcoin-price-to-database
        arguments:
          parameters:
          - name: url
            value: "{{item}}"
        withParam: "{{steps.generate-list-raw-price.outputs.result}}"



  - name: generate-list-raw-price
    script:
      image: gcr.io/kdcc-282418/python-worker
      command: [python]
      source: |
        import json
        import sys
        from google.cloud import storage

        def get_file_names():
          files = []
          client = storage.Client()
          for blob in client.list_blobs('workflowkddc', prefix='Bitcoin/price/'):
            files.append(str(blob.name))
          return files

        
        json.dump(get_file_names(), sys.stdout)

  - name: bitcoin-price-to-database
    inputs:
      parameters:
      - name: url
    script:

      env:
      - name: POSTGRES_DATABASE
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: dbname
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: username
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: password
      - name: POSTGRES_HOST
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: host
      - name: POSTGRES_PORT
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: port
      image: gcr.io/kdcc-282418/bitcoin-worker
      command: [python]
      source: |
        from google.cloud import storage
        from wfunc import db
        from smart_open import open as sopen
        import csv
        from io import StringIO

        db = db.Mydatabase()

        path = '{{inputs.parameters.url}}'
        name = path.split('/')[-1]
        if name[0] == 'c':
          table_name = 'coinbase'
        else:
          table_name = 'bitbase'
        bucket = 'workflowkddc' 
        
        
        with sopen( 'gs://{}/{}'.format(bucket, path), 'r') as r:
            next(r)
            reader = csv.reader(r)
            for line in reader:

                q  = """INSERT INTO timeseries VALUES (%s) ON CONFLICT DO NOTHING;
                INSERT INTO {} VALUES ( %s, %s, %s, %s, %s, %s, %s, %s) ON CONFLICT DO NOTHING
                            """.format(table_name)
                parameters = [int(line[0])]

                db.query( q, parameters = [int(line[0])]  + [int(line[0])] + list(map(float,line[1:])) )
                db.commit()
            
            db.close()





















  - name: backup
    container:
      env:
      - name: PGDATABASE
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: dbname
      - name: PGUSER
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: username
      - name: PGPASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: password
      - name: PGHOST
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: host
      - name: PGPORT
        valueFrom:
          secretKeyRef:
            name: postgres-secret-config
            key: port
      image: gcr.io/kdcc-282418/psql-worker
      command: [sh]
      args: ["pg_dump bitcoin > bitcoin.sql; gsutil cp bitcoin gs://workflowkddc/Bitcoin/comments/gold"]




  - name: concatenate
    script:
      image: gcr.io/kdcc-282418/python-worker
      command: [python]
      source: |
        import json
        import sys
        from google.cloud import storage

        prefix='Bitcoin/comments/processed/dollar_mention'
        client = storage.Client()
        bucket = client.bucket("workflowkddc")
        def get_file_names(prefix):
          files = []

          for blob in client.list_blobs('workflowkddc', prefix=prefix):
            files.append(str(blob.name))

          return files


        def chunks(lst, n):
            """Yield successive n-sized chunks from lst."""
            for i in range(0, len(lst), n):
                yield list(map(bucket.blob ,lst[i:i + n]))
        
        files = get_file_names(prefix)
        blobs = list(chunks(files,28))
        level1 = []

        for inx,oblst in enumerate(blobs):
          composed_blob = bucket.blob('Bitcoin/comments/processed/dollar_mention/level1/{}.txt'.format(inx))
          composed_blob.compose(oblst)
          level1.append(composed_blob )
        
        composed_blob = bucket.blob('Bitcoin/comments/gold/dollar_mention.txt')
        composed_blob.compose(level1)






















  # - name: post-bitcoin
  #   script:
  #     image: gcr.io/kdcc-282418/python-worker
  #     env:
  #       - name: AWS_SECRET_ACCESS_KEY
  #         valueFrom:
  #           secretKeyRef:
  #             name: aws-secret-config
  #             key: access_key
  #       - name: AWS_ACCESS_KEY_ID
  #         valueFrom:
  #           secretKeyRef:
  #             name: aws-secret-config
  #             key: key_id
  #       - name: POSTGRES_DATABASE
  #         valueFrom:
  #           secretKeyRef:
  #             name: postgres-secret-config
  #             key: dbname
  #       - name: POSTGRES_USER
  #         valueFrom:
  #           secretKeyRef:
  #             name: postgres-secret-config
  #             key: username
  #       - name: POSTGRES_PASSWORD
  #         valueFrom:
  #           secretKeyRef:
  #             name: postgres-secret-config
  #             key: password
  #       - name: POSTGRES_HOST
  #         valueFrom:
  #           secretKeyRef:
  #             name: postgres-secret-config
  #             key: host
  #       - name: POSTGRES_PORT
  #         valueFrom:
  #           secretKeyRef:
  #             name: postgres-secret-config
  #             key: port
  #     command: [python]
  #     source: |
  #       import sys

  #       from wfunc import func

  #       func.post_notebook('bitcoin','maythamalherz.com')
  #       sys.exit()


