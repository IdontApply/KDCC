apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: bitcoin-
spec:
  entrypoint: bitcoin-comment-getter
  templates:


  - name: bitcoin-comment-getter
    parallelism: 1
    steps:
    - - name: genrate-list-reddit          # 
        template: genrate-list-reddit

    - - name: bitcoin-loop-comment
        template: bitcoin-loop-comment
        arguments:
          parameters:
          - name: urls
            value: "{{item}}"
        withParam: "{{steps.genrate-list-reddit.outputs.result}}"
  

  - name: genrate-list-reddit
    script:
      image: gcr.io/kdcc-282418/python-worker
      command: [python]
      source: |
        import json
        import sys
        
        def generate_year_month():
          results = []
          for i in range(2013,2014): 
              for j in range(1,13):
                  if i == 2010 and j < 9:
                      pass
                  else:
                      results.append(str(i) + '-' + str(j).zfill(2))
          return ["https://files.pushshift.io/reddit/comments/RC_{}.bz2".format(x) for x in results]
        
        json.dump(generate_year_month(), sys.stdout)


  - name: bitcoin-loop-comment
    inputs:
      parameters:
      - name: urls
    steps:
    - - name: get
        template: bitcoin-get-comments-price
        arguments:
          parameters:
          - name: urls
            value: "{{inputs.parameters.urls}}"
    - - name: clean
        template: clean
        arguments:
          parameters:
          - name: message
            value: "{{steps.get.outputs.parameters.path}}"

############################################

  # - name: bitcoin-process-raw
  #   parallelism: 3
  #   steps:
  #   - - name: genrate-list-raw-comments
  #       template: genrate-list-raw-comments

  #   - - name: process
  #       template: process
  #       arguments:
  #         parameters:
  #         - name: urls
  #           value: "{{item}}"
  #       withParam: "{{steps.genrate-list-raw-comments.outputs.result}}"



  # - name: genrate-list-raw-comments
  #   script:
  #     image: gcr.io/kdcc-282418/python-worker
  #     command: [python]
  #     source: |
  #       import json
  #       import sys
  #       from google.cloud import storage

  #       def get_file_names():
  #         files = []
  #         client = storage.Client()
  #         for blob in client.list_blobs('workflowkddc', prefix='Bitcoin/comments/raw/'):
  #           files.append(str(blob.name))
  #         return files
        
  #       json.dump(get_file_names(), sys.stdout)


  # - name: process
  #   inputs:
  #     parameters:
  #     - name: urls
  #   container:
  #     env:
  #     - name: POSTGRES_DATABASE
  #       valueFrom:
  #         secretKeyRef:
  #           name: postgres-secret-config
  #           key: dbname
  #     - name: POSTGRES_USER
  #       valueFrom:
  #         secretKeyRef:
  #           name: postgres-secret-config
  #           key: username
  #     - name: POSTGRES_PASSWORD
  #       valueFrom:
  #         secretKeyRef:
  #           name: postgres-secret-config
  #           key: password
  #     - name: POSTGRES_HOST
  #       valueFrom:
  #         secretKeyRef:
  #           name: postgres-secret-config
  #           key: host
  #     - name: POSTGRES_PORT
  #       valueFrom:
  #         secretKeyRef:
  #           name: postgres-secret-config
  #           key: port
  #     image: gcr.io/kdcc-282418/bitcoin-worker
  #     command: [python]
  #     args: ["wfunc/wfunc/bitcoin.py","{{inputs.parameters.urls}}"]




  # - name: bitcoin-get-comments-price
  #   inputs:
  #     parameters:
  #     - name: urls
  #   script:
  #     image: gcr.io/kdcc-282418/getter-worker
  #     # env:
  #     #   - name: AWS_SECRET_ACCESS_KEY
  #     #     valueFrom:
  #     #       secretKeyRef:
  #     #         name: aws-secret-config
  #     #         key: access_key
  #     #   - name: AWS_ACCESS_KEY_ID
  #     #     valueFrom:
  #     #       secretKeyRef:
  #     #         name: aws-secret-config
  #     #         key: key_id
  #     command: [python]
  #     source: |
  #       from wfunc import func
  #       import os
      
  #       bucket = 'workflowkddc' 
  #       prefix = 'Bitcoin/comments' 
  #       filetype = 'txt'
  #       url = "{{inputs.parameters.urls}}"
  #       # path = 'gs://workflowkddc/Bitcoin/RC_2011-01.txt'
  #       path = func.get_parse_json_to_gcs(url, bucket, prefix, filetype)

  #       if not os.path.exists('tmp'):
  #         os.makedirs('tmp')
  #       with open("/tmp/path.txt", 'w') as w:
  #         w.write(path)
  #       # print('func.get_parse_json_to_gcs')

  #   outputs:
  #     parameters:
  #     - name: path       # name of output parameter
  #       valueFrom:
  #         path: /tmp/path.txt

  
  # - name: clean
  #   inputs:
  #     parameters:
  #     - name: message
  #   container:
  #     image: gcr.io/kdcc-282418/bitcoin-worker
  #     command: [python]
  #     args: ["wfunc/wfunc/bitcoin.py","{{inputs.parameters.message}}"]



########################################################
