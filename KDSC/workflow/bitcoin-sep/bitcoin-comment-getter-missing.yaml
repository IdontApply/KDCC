apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: bitcoin-comment-getter-
spec:
  entrypoint: bitcoin-comment-getter
  templates:


  - name: bitcoin-comment-getter
    parallelism: 1
    steps:
    - - name: genrate-list-reddit-missing
        template: genrate-list-reddit-missing

    - - name: get
        template: bitcoin-get-comments
        arguments:
          parameters:
          - name: url
            value: "{{item}}"
        withParam: "{{steps.genrate-list-reddit-missing.outputs.result}}"
  
  - name: genrate-list-reddit-missing
    script:
      image: gcr.io/kdcc-282418/python-worker
      command: [python]
      source: |
        import json
        import sys
        from google.cloud import storage

        def generate_year_month():
            results = []
            for i in range(2011,2018): 
                for j in range(1,13):
                    results.append(str(i) + '-' + str(j).zfill(2))
                
            return set(["RC_{}.txt".format(x) for x in results])

        def get_file_names():
            files = []
            client = storage.Client()
            for blob in client.list_blobs('workflowkddc', prefix='Bitcoin/comments/raw/'):
                files.append(str(blob.name).split('/')[-1])
            return set(files)

        gen = generate_year_month() 
        got = get_file_names()
        missing = gen - got
        link_missing = []
        for f in missing:
            link_missing.append( 'https://files.pushshift.io/reddit/comments/{}{}'.format(f[:-3],'bz2'))

        json.dump(link_missing, sys.stdout)

  - name: bitcoin-get-comments
    inputs:
      parameters:
      - name: url
    script:
      image: gcr.io/kdcc-282418/getter-worker
      command: [python]
      source: |
        from wfunc import func
        import os
      
        bucket = 'workflowkddc' 
        prefix = 'Bitcoin/comments' 
        filetype = 'txt'
        url = "{{inputs.parameters.url}}"
        # path = 'gs://workflowkddc/Bitcoin/RC_2011-01.txt'
        path = func.get_parse_json_to_gcs(url, bucket, prefix, filetype)

        # if not os.path.exists('tmp'):
        #   os.makedirs('tmp')
        # with open("/tmp/path.txt", 'w') as w:
        #   w.write(path)
        # # print('func.get_parse_json_to_gcs')

    # outputs:
    #   parameters:
    #   - name: path       # name of output parameter
    #     valueFrom:
    #       path: /tmp/path.txt

